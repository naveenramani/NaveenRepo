/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.h
  * @brief          : Header for main.c file.
  *                   This file contains the common defines of the application.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32f0xx_hal.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "MAX_31855.h"
#include "stdint.h"
#include <string.h>
#include <stdarg.h>
#include "ili9341.h"
#include "fonts.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include "eeprom.h"
#include "menu_display.h"
//#include "menu.h"
/* USER CODE END Includes */

/* Exported types ------------------------------------------------------------*/
/* USER CODE BEGIN ET */

/* USER CODE END ET */

/* Exported constants --------------------------------------------------------*/
/* USER CODE BEGIN EC */

/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */


/* USER CODE END EM */

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */
void loop(void);
void init(void);
void ReadICtemp(void);

/* USER CODE END EFP */

/* Private defines -----------------------------------------------------------*/
//Customer Menu
#define MFPLFryer		0
#define WowMomo_Veg		1
#define WowMomo_NonVeg	2
#define BestFrenchFries	3

#define MFPLFryerLogo 0
#define BestFrenchFriesLogo	1

#define Logo MFPLFryerLogo

//generate only EEPROM File  NO- full program, YES-Only EEPROM File
#define NO		1
#define YES		0


//Change this according to above Macro's
#define customerMenu 	WowMomo_Veg
#define eepromWrite		NO


#define relay_4_Pin GPIO_PIN_13
#define relay_4_GPIO_Port GPIOC
#define op_5_Pin GPIO_PIN_0
#define op_5_GPIO_Port GPIOC
#define relay_3_Pin GPIO_PIN_1
#define relay_3_GPIO_Port GPIOC
#define op_3_Pin GPIO_PIN_2
#define op_3_GPIO_Port GPIOC
#define relay_2_Pin GPIO_PIN_3
#define relay_2_GPIO_Port GPIOC
#define relay_1_Pin GPIO_PIN_0
#define relay_1_GPIO_Port GPIOA
#define ILI9341_CS_Pin GPIO_PIN_5
#define ILI9341_CS_GPIO_Port GPIOF
#define temp_cs_Pin GPIO_PIN_4
#define temp_cs_GPIO_Port GPIOA
#define ILI9341_Reset_Pin GPIO_PIN_4
#define ILI9341_Reset_GPIO_Port GPIOC
#define ILI9341_DC_Pin GPIO_PIN_5
#define ILI9341_DC_GPIO_Port GPIOC
#define ILI9341_RES_Pin GPIO_PIN_0
#define ILI9341_RES_GPIO_Port GPIOB
#define motor_nf_Pin GPIO_PIN_2
#define motor_nf_GPIO_Port GPIOB
#define motor_n2_Pin GPIO_PIN_10
#define motor_n2_GPIO_Port GPIOB
#define motor_n1_Pin GPIO_PIN_11
#define motor_n1_GPIO_Port GPIOB
#define new_rOK_Pin GPIO_PIN_13
#define new_rOK_GPIO_Port GPIOB
#define Stop_key_Pin GPIO_PIN_14
#define Stop_key_GPIO_Port GPIOB
#define Home_key_Pin GPIO_PIN_15
#define Home_key_GPIO_Port GPIOB
#define back_key_Pin GPIO_PIN_6
#define back_key_GPIO_Port GPIOC
#define m_forward_switch_Pin GPIO_PIN_7
#define m_forward_switch_GPIO_Port GPIOC
#define m_forward_switch_EXTI_IRQn EXTI4_15_IRQn
#define m_reverse_switch_Pin GPIO_PIN_8
#define m_reverse_switch_GPIO_Port GPIOC
#define m_reverse_switch_EXTI_IRQn EXTI4_15_IRQn
#define rotary_sw_Pin GPIO_PIN_11
#define rotary_sw_GPIO_Port GPIOA
#define ESP_BOOT_Pin GPIO_PIN_10
#define ESP_BOOT_GPIO_Port GPIOC
#define ESP_EN_PIN_Pin GPIO_PIN_11
#define ESP_EN_PIN_GPIO_Port GPIOC
#define buzzer_Pin GPIO_PIN_3
#define buzzer_GPIO_Port GPIOB
/* USER CODE BEGIN Private defines */
volatile uint8_t rLastState;
volatile uint8_t rStateClk;
volatile uint8_t rStateDt;
volatile uint16_t rCount;
//static uint16_t	rPreviousCount;
volatile uint16_t forward_callback;
volatile uint16_t reverse_callback;
volatile uint8_t turnsDetected;
volatile uint8_t Sw_detected;
volatile uint8_t back_detected;
volatile uint8_t home_detected;
char temp_buff[100];
char temp_buff1[50];
char disp_num_buf[10];
char temp_num_buf[10];
volatile uint16_t lastCount;
volatile uint16_t direction;

/*volatile uint32_t CountSecondsT1;
volatile uint32_t CountSecondsT2;
volatile uint32_t CountSecondsT3;*/
uint16_t timeout;
uint32_t CookingTimeCompleted;
uint8_t CheckDoubleDip;
uint8_t CheckHoldingTime;
uint8_t SecondCookingTime;

uint32_t BasketTime;

uint8_t recipieCount;
uint8_t menuCnt;

volatile uint8_t motorStatus;
uint8_t heaterStatus;
volatile uint16_t rCountValue;

typedef struct
{
	volatile uint16_t rotaryOk;
	volatile uint16_t homeOk;
	volatile uint16_t backOk;
//	uint8_t rotaryOk:1;
	volatile uint16_t stopKey;
}__KEYS__;


typedef struct
{
	volatile uint8_t stopFlag:1;
	volatile uint8_t homeFlag:1;
	volatile uint8_t backFlag:1;
	volatile uint8_t rotaryFlag:1;
	volatile uint8_t stopPressed:1;
}__KEY_FLAGS__;

typedef enum
{
	upDirection = 1,
	downDirection,
	Error_Idle
}__MOTOR_DIRECTION_;

void driveMotor(__MOTOR_DIRECTION_ direction);
void LSerror(void);


int intToStr(int x,char str[],int d);
void reverse2(char *str,int len);

int intToStrIndex(int x,char str[],int d);

uint8_t ESP_DATA_BUFFER[35];

typedef enum
{
	AUTOCOOKING = 0x1,
	MANUALCOOKING = 0x2,
	EMERGENCYSTOP = 0xC,
	FIRMWAREVERSION = 0xF
}ESP_MSG_TYPE;

void sendDataToESP(ESP_MSG_TYPE msg);

/* USER CODE END Private defines */

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
