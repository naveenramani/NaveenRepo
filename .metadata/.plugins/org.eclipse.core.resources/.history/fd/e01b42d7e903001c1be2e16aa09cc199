/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
//#include "build_number.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "eeprom.h"
#include "menu.h"
#include "rotary.h"
#include "buzzer_.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc;

I2C_HandleTypeDef hi2c1;

IWDG_HandleTypeDef hiwdg;

SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
struct Menu* head = NULL;
//struct Menu* previousMenu = NULL;
uint8_t Txbuf[3];
uint8_t buf[5];
const char swversion[8] = "V4.0 ";

#if customerMenu == WowMomo_Veg

const char menu_1[] = "Paneer Momo";//"MENU 1";
const char menu_2[] = "Veg Classic";//""MENU 2";
const char menu_3[] = "Veg Darjeeling";//""MENU 3";
const char menu_4[] = "Corn Cheese";//""MENU 4";
const char menu_5[] = "Veg Supreme";//""MENU 5";
const char menu_6[] = "MENU 6";
const char menu_7[] = "MENU 7";
const char menu_8[] = "MENU 8";

#elif customerMenu == WowMomo_NonVeg

const char menu_1[] = "Chicken Darjeeling";//"MENU 1";
const char menu_2[] = "Chicken Classic";//""MENU 2";
const char menu_3[] = "Chicken Cheese";//""MENU 3";
const char menu_4[] = "Chicken Schzewan";//""MENU 4";
const char menu_5[] = "Chicken Supreme";//""MENU 5";
const char menu_6[] = "MENU 6";
const char menu_7[] = "MENU 7";
const char menu_8[] = "MENU 8";

#elif customerMenu == BestFrenchFries

const char menu_1[] = "MENU 1";
const char menu_2[] = "MENU 2";
const char menu_3[] = "MENU 3";
const char menu_4[] = "MENU 4";
const char menu_5[] = "MENU 5";
const char menu_6[] = "MENU 6";
const char menu_7[] = "MENU 7";
const char menu_8[] = "MENU 8";

#elif customerMenu == MFPLFryer

const char menu_1[] = "MENU 1";
const char menu_2[] = "MENU 2";
const char menu_3[] = "MENU 3";
const char menu_4[] = "MENU 4";
const char menu_5[] = "MENU 5";
const char menu_6[] = "MENU 6";
const char menu_7[] = "MENU 7";
const char menu_8[] = "MENU 8";

#endif

const char portion_1[] = "Paneer Momo";//"MENU 1";
const char portion_2[] = "Veg Classic";//""MENU 2";
const char portion_3[] = "Veg Darjeeling";//""MENU 3";
const char portion_4[] = "Corn Cheese";//""MENU 4";
const char portion_5[] = "Veg Supreme";//""MENU 5";




volatile uint8_t uart_RX;
uint8_t uart_buff[70];
uint8_t uart_count;
uint8_t uartReceivedFlag;
uint8_t backKeyValue;
uint8_t pin =0;
__esp_queue espQueue;
//IWDG_HandleTypeDef hiwdg;
CIRCQUEUE_DEF(espQueue,10);
//__ESP_UPDATE espBuf[20];
//extern __homeScreenPage machineState;
extern __homeScreenPage machineState;
extern __homeScreenPage currentMachineState;

extern const uint8_t logo[];
extern const uint8_t logo_200_200[];
extern const uint8_t logo_100_100[];
extern const uint8_t menuParameters[][26];

uint8_t eepromEspBuf[128];
uint32_t stopDelay;
uint8_t stopCount;

uint8_t stopValue;

uint8_t espDataReceivedFlag;

TM_RE_t RE1_Data;

__KEYS__ switchKeys;
__KEY_FLAGS__ keyFlags;

extern __Sleep_Settings sleepSettings;
extern __Sleep_Flags  sleepFlag;
extern __Cooking_Settings cookingSettings;
extern __PrintDisplayState printState;
extern __OIL_HEAT_SETTINGS oilHeatSettings;
extern __MANUAL_ manualParameters;
extern uint8_t menuNo,menuSelected,portionNoSelected;
extern struct Menu* CookingMenuDetails;
extern __PORTION_MENU__ portionValues[5];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM1_Init(void);
static void MX_IWDG_Init(void);
static void MX_TIM15_Init(void);
static void MX_ADC_Init(void);
/* USER CODE BEGIN PFP */
void spi_send_Data(void);
void relay_control(void);
void checkRotaryState(void);
void Switch(void);
void processingState(void);
void displayProcess(void);
void user_printf(const char * format, ...);
void SystemInitilization(void);
void CheckStopDetected(void);
void GetRotaryValue(void);
uint16_t error_counter=0;
uint8_t basketDown;
uint8_t basketUp;
uint32_t downDelay;
uint32_t upDelay;
void basketUpDown(void);
__MOTOR_DIRECTION_ previousDirection;

uint16_t prevrcount = 0;

uint16_t rcount;
volatile uint16_t TIMEOUT_UP_REACHED,TIMEOUT_DOWN_REACHED ;
volatile uint8_t TIMEOUT_UP_FLAG,TIMEOUT_DOWN_FLAG ;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float temp1;
float vsense = (3.3/4096);
float v25 = 1.43;
float avg_slope = 0.0043;
uint16_t temp123;


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_I2C1_Init();
  MX_TIM3_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();
  MX_IWDG_Init();
  MX_TIM15_Init();
  MX_ADC_Init();
  /* USER CODE BEGIN 2 */

  SystemInitilization();
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim15);

  HAL_ADC_Start(&hadc);
  HAL_GPIO_WritePin(ESP_BOOT_GPIO_Port, ESP_BOOT_Pin, RESET);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
  init();
  HAL_UART_Receive_IT(&huart2,&uart_RX, 1);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
  driveMotor(upDirection);

  TIM1->CNT = 65536/2;
  rcount = TIM1->CNT;
  prevrcount = rcount;
  /* USER CODE END 2 */

#if eepromWrite == YES

  while(1)
  {
	  	  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);

		  addMenu(&head,menu_1,menuParameters[0]);
		  addMenu(&head,menu_2,menuParameters[1]);
		  addMenu(&head,menu_3,menuParameters[2]);
		  addMenu(&head,menu_4,menuParameters[3]);
		  addMenu(&head,menu_5,menuParameters[4]);
		  addMenu(&head,menu_6,menuParameters[5]);
		  addMenu(&head,menu_7,menuParameters[6]);
		  addMenu(&head,menu_8,menuParameters[7]);


		  ee24_write(COMPLETE_RECIPE_COUNT,&zero,1,100);
		  ee24_write(COMPLETE_RECIPE_COUNT+1,&zero,1,100);
		  ee24_write(COMPLETE_RECIPE_COUNT+2,&zero,1,100);
		  ee24_write(COMPLETE_RECIPE_COUNT+3,&zero,1,100);
		  ee24_write(ESP_EEPROM_HEAD,&zero,1,200);
		  ee24_write(ESP_EEPROM_TAIL,&zero,1,200);

		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
  }

#elif eepromWrite == NO

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_IWDG_Refresh(&hiwdg);
	  ReadICtemp();
	  ILI9341_WriteString1(0,0,swversion, ILI9341_BLACK, ILI9341_WHITE);
	  GetRotaryValue();
	  MachineProcess();
	  switchDetected();
	  DisplayPrint();
	  GetempData();
	  if(process_complete_buzzer_play==1)
	  {
		  buzeer_beep(2000);
		  process_complete_buzzer_play=0;
	  }
	  HAL_Delay(50);
  }

#endif
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
}

/**
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  hadc.Init.ContinuousConvMode = ENABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.DMAContinuousRequests = DISABLE;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{

  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
  hiwdg.Init.Window = 4095;
  hiwdg.Init.Reload = 4095;
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 4;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 999;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 47999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 999;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim15.Init.Period = 959;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, relay_4_Pin|op_5_Pin|relay_3_Pin|op_3_Pin
                          |relay_2_Pin|ILI9341_Reset_Pin|ILI9341_DC_Pin|ESP_BOOT_Pin
                          |ESP_EN_PIN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, relay_1_Pin|temp_cs_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ILI9341_RES_Pin|motor_n2_Pin|motor_n1_Pin|buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : relay_4_Pin op_5_Pin relay_3_Pin op_3_Pin
                           relay_2_Pin ILI9341_Reset_Pin ILI9341_DC_Pin ESP_BOOT_Pin */
  GPIO_InitStruct.Pin = relay_4_Pin|op_5_Pin|relay_3_Pin|op_3_Pin
                          |relay_2_Pin|ILI9341_Reset_Pin|ILI9341_DC_Pin|ESP_BOOT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : relay_1_Pin temp_cs_Pin */
  GPIO_InitStruct.Pin = relay_1_Pin|temp_cs_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : ILI9341_CS_Pin */
  GPIO_InitStruct.Pin = ILI9341_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ILI9341_CS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : ILI9341_RES_Pin motor_n2_Pin motor_n1_Pin buzzer_Pin */
  GPIO_InitStruct.Pin = ILI9341_RES_Pin|motor_n2_Pin|motor_n1_Pin|buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : motor_nf_Pin */
  GPIO_InitStruct.Pin = motor_nf_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(motor_nf_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : new_rOK_Pin Home_key_Pin */
  GPIO_InitStruct.Pin = new_rOK_Pin|Home_key_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : Stop_key_Pin */
  GPIO_InitStruct.Pin = Stop_key_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(Stop_key_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : back_key_Pin */
  GPIO_InitStruct.Pin = back_key_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(back_key_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : m_forward_switch_Pin m_reverse_switch_Pin */
  GPIO_InitStruct.Pin = m_forward_switch_Pin|m_reverse_switch_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : rotary_sw_Pin */
  GPIO_InitStruct.Pin = rotary_sw_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(rotary_sw_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : ESP_EN_PIN_Pin */
  GPIO_InitStruct.Pin = ESP_EN_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ESP_EN_PIN_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

}

/* USER CODE BEGIN 4 */


void init(void) {
	HAL_Delay(100);

    ILI9341_Unselect();

    HAL_Delay(100);
    //ILI9341_TouchUnselect();
    ILI9341_Init();

    HAL_Delay(100);

    ILI9341_FillScreen(ILI9341_WHITE);

    HAL_Delay(100);

#if customerMenu == MFPLFryer
        ILI9341_WriteString1(100, 12*10, "MFPL FRYER", ILI9341_BLACK, ILI9341_WHITE);
#elif customerMenu == BestFrenchFries
        ILI9341_WriteString1(60, 12*10, "Best French Fries", ILI9341_BLACK, ILI9341_WHITE);
#endif

    HAL_Delay(100);


    HAL_GPIO_WritePin(ESP_EN_PIN_GPIO_Port,ESP_EN_PIN_Pin,GPIO_PIN_SET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(ESP_EN_PIN_GPIO_Port,ESP_EN_PIN_Pin,GPIO_PIN_RESET);
}




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance == USART2)
	{
		uart_buff[uart_count] = (uint8_t)uart_RX;
		uart_count++;
		if(uart_buff[63] == 0x12)
		{
			uart_count = 0;
//			FryerState = updateMenu;
			espDataReceivedFlag = 1;

		}

		 HAL_UART_Receive_IT(&huart2,&uart_RX, 1);
	}
}

uint8_t pushESPData(__esp_queue * qptr,uint8_t data[])
{
	uint8_t next = qptr->head + 1;



	memcpy(eepromEspBuf,data,32);

	if(next >= qptr->maxLen)
		next = 0;

	if(next == qptr->tail)
		return -1;

	ee24_write(ESP_MENU_EEPROM_START(qptr->head),eepromEspBuf,8,500);

	ee24_write(ESP_MENU_EEPROM_START(qptr->head)+ 8,&eepromEspBuf[8],8,500);

	ee24_write(ESP_MENU_EEPROM_START(qptr->head)+ 16,&eepromEspBuf[16],8,500);

	ee24_write(ESP_MENU_EEPROM_START(qptr->head)+24,&eepromEspBuf[24],8,500);


	qptr->head = next;

	ee24_write(ESP_EEPROM_HEAD,&next,1,200);

	memset(uart_buff,0,sizeof(uart_buff));

	return 0;
}


uint8_t updateESPData(__esp_queue * qptr)
{
    if((machineState == MachineIdle))
    {
    	if(qptr->head == qptr->tail)
    			return -1;

    	uint8_t next = 0;
    	while(qptr->tail != qptr->head)
    	{

        	ee24_read(ESP_MENU_EEPROM_START(qptr->tail),eepromEspBuf,32,200);

//        	addMenuUart(&head,eepromEspBuf);

        	memset(eepromEspBuf,0,sizeof(eepromEspBuf));

        	next= qptr->tail+1;

        	if(next >= qptr->maxLen)
        		next = 0;

        	qptr->tail = next;
    	}

    	ee24_write(ESP_EEPROM_TAIL,&next,1,200);
//    	getMenu(&head);
    }

    return 0;
}

void CheckStopDetected(void)
{
	if((HAL_GetTick()-stopDelay >= 1000))
	{
		stopDelay=HAL_GetTick();

		if(HAL_GPIO_ReadPin(Stop_key_GPIO_Port,Stop_key_Pin) == GPIO_PIN_RESET)
		{
			stopCount++;

			if(stopCount >= 3)
			{
				stopCount = 0;

				machineState = menuStopPressed;
			}
		}
		else
			stopCount = 0;
	}
}



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM3)
	{


		if(sleepFlag.countEnabled)
		{
			sleepSettings.sleepCount++;

			if(sleepSettings.sleepCount >= sleepSettings.sleepTimeout)
			{
				machineState = machineSleepMode;
				currentMachineState = machineState;
				sleepFlag.deepSleepEnabled = 1;
				sleepFlag.countEnabled = 0;
				sleepSettings.sleepCount = 0;
				printState = printSleepMode;
			}

		}

		if(sleepFlag.deepSleepEnabled)
		{
			sleepSettings.deepSleepCount++;

			if(sleepSettings.deepSleepCount >= sleepSettings.deepSleepTimeout)
			{
				machineState = machineDeepSleep;
				currentMachineState = machineState;
				sleepFlag.deepSleepEnabled = 0;
				sleepSettings.deepSleepCount = 0;
				HAL_GPIO_WritePin(op_5_GPIO_Port, op_5_Pin, GPIO_PIN_RESET);
				heaterStatus = 0;
				driveMotor(upDirection);

				printState = printDeepSleep;
			}

		}

		if(cookingSettings.cookingEnabled)
		{
//			timeout--;

			if(cookingSettings.cookingTime < 1)
			{
//				CookingTimeCompleted = 1;
				cookingSettings.cookingTime = 0;
				timeout = 0;
				if(cookingSettings.checkDoubleDip == 1)
				{
					BasketTime = HAL_GetTick();
				}
			}
			cookingSettings.cookingTime--;
		}

	}

	if(htim->Instance == TIM15)//20ms
	{
		buzz_call_50_ms();

			if(HAL_GPIO_ReadPin(back_key_GPIO_Port,back_key_Pin) == GPIO_PIN_RESET)
			{
				switchKeys.backOk++;

				if((switchKeys.backOk >= 7) && (keyFlags.backFlag == 0))
				{
					back_detected = 1;
					switchKeys.backOk = 0;
					keyFlags.backFlag = 1;
				}
			}
			else
			{
				switchKeys.backOk = 0;
				keyFlags.backFlag = 0;
			}


			if(HAL_GPIO_ReadPin(rotary_sw_GPIO_Port,rotary_sw_Pin) == GPIO_PIN_RESET)
			{
				switchKeys.rotaryOk++;

				if((switchKeys.rotaryOk >= 7) && (keyFlags.rotaryFlag == 0))
				{
					Sw_detected = 1;
					switchKeys.rotaryOk = 0;
					keyFlags.rotaryFlag = 1;
				}
			}
			else
			{
				keyFlags.rotaryFlag = 0;
				switchKeys.rotaryOk = 0;
			}

	/*		if(HAL_GPIO_ReadPin(new_rOK_GPIO_Port,new_rOK_Pin) == GPIO_PIN_RESET)
			{
				switchKeys.rotaryOk++;

				if((switchKeys.rotaryOk >= 150) && (keyFlags.rotaryFlag == 0))
				{
					Sw_detected = 1;
					switchKeys.rotaryOk = 0;
					keyFlags.rotaryFlag = 1;
				}
			}
			else
			{
				keyFlags.rotaryFlag = 0;
				switchKeys.rotaryOk = 0;
			}*/
	//	if(currentMachineState != homeScreenInit)//by san
		{

			if(HAL_GPIO_ReadPin(Home_key_GPIO_Port,Home_key_Pin)  == GPIO_PIN_RESET)
			{
				switchKeys.homeOk++;

				if((switchKeys.homeOk >= 7) && (keyFlags.homeFlag == 0))
				{
					keyFlags.homeFlag = 1;
					home_detected = 1;
					switchKeys.homeOk = 0;
				}
			}
			else
			{
				keyFlags.homeFlag = 0;
				switchKeys.homeOk = 0;
			}


			if(HAL_GPIO_ReadPin(Stop_key_GPIO_Port,Stop_key_Pin) == GPIO_PIN_RESET)
			{
				switchKeys.stopKey++;

				if((switchKeys.stopKey >= 5) && (keyFlags.stopFlag == 0))
				{
					keyFlags.stopFlag = 1;
					switchKeys.stopKey = 0;
					machineState = menuStopPressed;
					keyFlags.stopPressed = 1;
				}
			}
			else
			{
				keyFlags.stopFlag = 0;
				switchKeys.stopKey = 0;
//				keyFlags.stopPressed = 0;
			}
		}
	}
}

#if 0
void user_printf(const char * format, ...)
{
	va_list arg;
	uint16_t n;
   char buf[100];

   va_start (arg, format);
   n = vsprintf (buf, format,arg);
   HAL_UART_Transmit(&huart2,(uint8_t*)buf,n,100);
   va_end (arg);

}
#endif

void SystemInitilization(void)
{
	  rCount = 0;
	  uint8_t dummy[15] = "\0";
	  uint8_t zero = 0;


	  ee24_read(MENU_COUNT,dummy,9,200);


	  recipieCount = dummy[0];


	  if((dummy[1] == 255) || (dummy[1] == 0))
		  oilHeatSettings.preHeatSetTemp = PRE_HEAT_CUTOFF_MIN;
	  else
		  oilHeatSettings.preHeatSetTemp = dummy[1];

	  if((dummy[2] == 255) || (dummy[2] == 0))
		  oilHeatSettings.preHeatCutTemp = PRE_HEAT_CUTOFF_MAX;
	  else
		  oilHeatSettings.preHeatCutTemp = dummy[2];


	  if((dummy[3] == 255) || (dummy[3] == 0))
		  oilHeatSettings.sleepHeatSet = SLEEP_OIL_TEMP_MIN;
	  else
		  oilHeatSettings.sleepHeatSet = dummy[3];

	  if((dummy[4] == 255) || (dummy[4] == 0))
		  oilHeatSettings.sleepHeatCutoff = SLEEP_OIL_TEMP_MAX;
	  else
		  oilHeatSettings.sleepHeatCutoff = dummy[4];

/*	  if((dummy[5] == 255) || (dummy[5] == 0))
		  sleepSettings.sleepHour = 1;
	  else
		  sleepSettings.sleepHour = dummy[5];*/

	  if((dummy[6] == 255) || (dummy[6] == 0))
		  sleepSettings.sleepMinutes = 20;
	  else
		  sleepSettings.sleepMinutes = dummy[6];

/*	  if((dummy[7] == 255) || (dummy[7] == 0))
		  sleepSettings.deepSleepHour = 1;
	  else
		  sleepSettings.deepSleepHour = dummy[7];*/

	  if((dummy[8] == 255) || (dummy[8] == 0))
		  sleepSettings.deepSleepMin = 20;
	  else
		  sleepSettings.deepSleepMin = dummy[8];


	  sleepSettings.sleepTimeout = MIN_TO_SEC((sleepSettings.sleepMinutes));

	  sleepSettings.deepSleepTimeout = MIN_TO_SEC((sleepSettings.deepSleepMin));



	  if((recipieCount == 255) || (recipieCount == 0))


	  {
		  recipieCount = 0;

			  addMenu(&head,menu_1,menuParameters[0]);
			  addMenu(&head,menu_2,menuParameters[1]);
			  addMenu(&head,menu_3,menuParameters[2]);
			  addMenu(&head,menu_4,menuParameters[3]);
			  addMenu(&head,menu_5,menuParameters[4]);
			  addMenu(&head,menu_6,menuParameters[5]);
			  addMenu(&head,menu_7,menuParameters[6]);
			  addMenu(&head,menu_8,menuParameters[7]);


		    ee24_write(COMPLETE_RECIPE_COUNT,&zero,1,100);
		    ee24_write(COMPLETE_RECIPE_COUNT+1,&zero,1,100);
		    ee24_write(COMPLETE_RECIPE_COUNT+2,&zero,1,100);
		    ee24_write(COMPLETE_RECIPE_COUNT+3,&zero,1,100);

		    ee24_write(ESP_EEPROM_HEAD,&zero,1,200);
		    ee24_write(ESP_EEPROM_TAIL,&zero,1,200);
	  }

	  else


	  {
		  getMenu(&head);

//		  ILI9341_FillScreenOffset(ILI9341_WHITE);
	  }

	ee24_read(ESP_EEPROM_HEAD,&espQueue.head,1,200);
	if((espQueue.head == 255) || (espQueue.head == 0))
	{
		espQueue.head = 0;
	}

	ee24_read(ESP_EEPROM_TAIL,&espQueue.tail,1,200);

	if((espQueue.tail == 255) || (espQueue.tail == 0))
	{
		espQueue.tail = 0;
	}

	  //TM_RE_Init(&RE1_Data, GPIOA, rotary_clk_Pin, GPIOA, rotary_dt_Pin);

	  /* Set rotation mode for rotary 1 */
	  //TM_RE_SetMode(&RE1_Data, TM_RE_Mode_One);


	  ee24_read(MANUAL_MIN_TEMP,dummy,2,200);

		if((dummy[0] == 255) || (dummy[0] == 0))
		{
			manualParameters.manualSetTemp = 170;
		}
		else
			manualParameters.manualSetTemp = dummy[0];

		if((dummy[1] == 255) || (dummy[1] == 0))
		{
			manualParameters.manualCuttOffTemp = 175;
		}
		else
			manualParameters.manualCuttOffTemp = dummy[1];

//		ILI9341_WriteString1(100, 12*10, "xxxxxxxxxxxxxx", ILI9341_BLACK, ILI9341_WHITE);
	sleepFlag.countEnabled = 1;



}


void driveMotor(__MOTOR_DIRECTION_ direction)
{
	if((direction == upDirection) && (HAL_GPIO_ReadPin(m_forward_switch_GPIO_Port,m_forward_switch_Pin) != GPIO_PIN_RESET))
	{
		HAL_GPIO_WritePin(motor_n1_GPIO_Port, motor_n1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor_n2_GPIO_Port, motor_n2_Pin, GPIO_PIN_RESET);
		TIMEOUT_UP_FLAG = 0;
	}

	if((direction == downDirection) && (HAL_GPIO_ReadPin(m_reverse_switch_GPIO_Port,m_reverse_switch_Pin) != GPIO_PIN_RESET))
	{
		HAL_GPIO_WritePin(motor_n2_GPIO_Port, motor_n2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor_n1_GPIO_Port, motor_n1_Pin, GPIO_PIN_RESET);
		TIMEOUT_DOWN_FLAG = 0;
	}
	previousDirection = direction;

}



void basketUpDown(void)
{
	if((HAL_GetTick()-downDelay >= 5000) && (basketDown == 0))
	{
		upDelay=HAL_GetTick();
		basketDown = 1;
		basketUp = 0;

		ILI9341_WriteString1(100, 12*10, "DOWN", ILI9341_BLACK, ILI9341_WHITE);

		driveMotor(downDirection);

	}

	if((HAL_GetTick()-upDelay >= 5000) && (basketUp == 0))
	{
		downDelay=HAL_GetTick();
		basketUp = 1;
		basketDown = 0;

		ILI9341_WriteString1(100, 12*10, "UP    ", ILI9341_BLACK, ILI9341_WHITE);

		driveMotor(upDirection);
	}
}

void reverse2(char *str,int len)
{
    int i = 0,j = len-1,temp;

    while(i<j)
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;j--;
    }
}

int intToStr(int x,char str[],int d)
{
    int i = 0;

    while(x)
    {
        str[i++] = (x%10) + '0';
        x = x/10;
    }

    while(i < d)
        str[i++] = '0';

    reverse2(str,i);
    str[i] = '\0';
    return i;
}

int intToStrIndex(int x,char str[],int d)
{
    int i = 0;

    while(x)
    {
        str[i++] = (x%10) + '0';
        x = x/10;
    }

    while(i < d)
        str[i++] = '0';

    reverse2(str,i);
    str[i] = '.';
    str[i+1] = ' ';
    i++;
    return i;
}


void GetRotaryValue(void)
{
	  if ((TIM1->CNT > 60000) || (TIM1->CNT <= 0))
	  {
		  TIM1->CNT = 65536/2;
	  }

	  if (prevrcount > rcount)
	  {
		  turnsDetected = 1;
		  direction = 2;
		  prevrcount = rcount;
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
			HAL_Delay(50);
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
	  }
	  else if (prevrcount < rcount)
	  {
		  turnsDetected = 1;
		  direction = 1;
		  prevrcount = rcount;
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_SET);
			HAL_Delay(50);
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
	  }
	  else
	  {

	  }

	  rcount = TIM1->CNT;
}

/**
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
/*void MX_IWDG_Init(void)
{

   USER CODE BEGIN IWDG_Init 0

   USER CODE END IWDG_Init 0

   USER CODE BEGIN IWDG_Init 1

   USER CODE END IWDG_Init 1
  hiwdg.Instance = IWDG;
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
  hiwdg.Init.Window = 4095;
  hiwdg.Init.Reload = 4095;
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
  {
    Error_Handler();
  }
   USER CODE BEGIN IWDG_Init 2

   USER CODE END IWDG_Init 2

}*/

void sendDataToESP(ESP_MSG_TYPE msg)
{
	if(msg == AUTOCOOKING)
	{
		memset(ESP_DATA_BUFFER,0,sizeof(ESP_DATA_BUFFER));
		ESP_DATA_BUFFER[0] = 0x13;
		ESP_DATA_BUFFER[1] = AUTOCOOKING;
		ESP_DATA_BUFFER[2] = CookingMenuDetails->menuID;
		ESP_DATA_BUFFER[3] = portionNoSelected;
		ESP_DATA_BUFFER[4] = portionValues[rCountValue - 1].portionSetTemp;
		ESP_DATA_BUFFER[5] = portionValues[rCountValue - 1].portionCutTemp;
		ESP_DATA_BUFFER[6] = Temperature_value;
		ESP_DATA_BUFFER[7] = 0;
		ESP_DATA_BUFFER[8] = 0;
		ESP_DATA_BUFFER[9] = portionValues[rCountValue - 1].portionT1 >> 8;
		ESP_DATA_BUFFER[10] = portionValues[rCountValue - 1].portionT1 & 0xff;
		ESP_DATA_BUFFER[11] = portionValues[rCountValue - 1].portionT2 >> 8;
		ESP_DATA_BUFFER[12] = portionValues[rCountValue - 1].portionT2 &  0xff;
		ESP_DATA_BUFFER[13] = portionValues[rCountValue - 1].portionHT >> 8;
		ESP_DATA_BUFFER[14] = portionValues[rCountValue - 1].portionHT &  0xff;
		ESP_DATA_BUFFER[15] = !HAL_GPIO_ReadPin(m_forward_switch_GPIO_Port,m_forward_switch_Pin);
		ESP_DATA_BUFFER[16] = !HAL_GPIO_ReadPin(m_reverse_switch_GPIO_Port,m_reverse_switch_Pin);
		ESP_DATA_BUFFER[17] = motorStatus;
		ESP_DATA_BUFFER[18] = heaterStatus;
		ESP_DATA_BUFFER[19] = keyFlags.stopFlag;
		ESP_DATA_BUFFER[31] = 0x12;


		HAL_UART_Transmit(&huart2,ESP_DATA_BUFFER,32,500);
	}
	else if(msg == MANUALCOOKING)
	{
		memset(ESP_DATA_BUFFER,0,sizeof(ESP_DATA_BUFFER));
		ESP_DATA_BUFFER[0] = 0x13;
		ESP_DATA_BUFFER[1] = MANUALCOOKING;
		ESP_DATA_BUFFER[4] = manualParameters.manualSetTemp;
		ESP_DATA_BUFFER[5] = manualParameters.manualCuttOffTemp;
		ESP_DATA_BUFFER[6] = Temperature_value;
		ESP_DATA_BUFFER[15] = !HAL_GPIO_ReadPin(m_forward_switch_GPIO_Port,m_forward_switch_Pin);
		ESP_DATA_BUFFER[16] = !HAL_GPIO_ReadPin(m_reverse_switch_GPIO_Port,m_reverse_switch_Pin);
		ESP_DATA_BUFFER[17] = motorStatus;
		ESP_DATA_BUFFER[18] = heaterStatus;
		ESP_DATA_BUFFER[19] = keyFlags.stopFlag;
		ESP_DATA_BUFFER[31] = 0x12;


		HAL_UART_Transmit(&huart2,ESP_DATA_BUFFER,32,500);
	}
	else if(msg == EMERGENCYSTOP)
	{
		memset(ESP_DATA_BUFFER,0,sizeof(ESP_DATA_BUFFER));
		ESP_DATA_BUFFER[0] = 0x13;
		ESP_DATA_BUFFER[1] = EMERGENCYSTOP;
		ESP_DATA_BUFFER[6] = Temperature_value;
		ESP_DATA_BUFFER[15] = !HAL_GPIO_ReadPin(m_forward_switch_GPIO_Port,m_forward_switch_Pin);
		ESP_DATA_BUFFER[16] = !HAL_GPIO_ReadPin(m_reverse_switch_GPIO_Port,m_reverse_switch_Pin);
		ESP_DATA_BUFFER[17] = motorStatus;
		ESP_DATA_BUFFER[18] = heaterStatus;
		ESP_DATA_BUFFER[19] = keyFlags.stopFlag;
		ESP_DATA_BUFFER[31] = 0x12;


		HAL_UART_Transmit(&huart2,ESP_DATA_BUFFER,32,500);
	}
	else if(msg == FIRMWAREVERSION)
	{

	}
}
void ReadICtemp(void)
{
	 HAL_ADC_PollForConversion(&hadc,100);
	 temp123 =  HAL_ADC_GetValue(&hadc);
	 temp1 = ((v25-((float)temp123*vsense)))/avg_slope;
	 memset(temp_buff,0,strlen(temp_buff));
	 intToStr((uint8_t)temp1,temp_buff,3);
	 ILI9341_WriteString1(130,0,temp_buff, ILI9341_BLACK, ILI9341_WHITE);
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
